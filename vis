#include <stdio.h>

typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
} Process;

void round_robin(Process processes[], int n, int time_quantum, int cst) {
    int time = 0, completed = 0;
    int i;
    int total_tat = 0, total_wt = 0;

    // To track Gantt Chart
    int gantt_process[100];  // Array to log process IDs
    int gantt_time[100];     // Array to log corresponding time points
    int gantt_index = 0;

    while (completed < n) {
        int any_process_executed = 0;
        for (i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].arrival_time <= time) {
                any_process_executed = 1;

                gantt_process[gantt_index] = processes[i].process_id;
                gantt_time[gantt_index++] = time;

                // Execute the process
                if (processes[i].remaining_time > time_quantum) {
                    time += time_quantum + cst; // Add context switch time
                    processes[i].remaining_time -= time_quantum;
                } else {
                    // Process finishes execution
                    time += processes[i].remaining_time + cst; // Add context switch time
                    processes[i].remaining_time = 0;
                    processes[i].completion_time = time - cst; // Remove last CST
                    processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
                    processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;

                    total_tat += processes[i].turnaround_time;
                    total_wt += processes[i].waiting_time;
                    completed++;
                }
            }
        }

        // If no process could execute, increase time (idle period)
        if (!any_process_executed) {
            time++;
        }
    }

    gantt_time[gantt_index] = time; // Log the final time

    // Display Gantt Chart
    printf("\nGantt Chart:\n|");
    for (i = 0; i < gantt_index; i++) {
        printf(" P%d |", gantt_process[i]);
    }
    printf("\n0");
    for (i = 0; i < gantt_index; i++) {
        printf("    %d", gantt_time[i + 1]);
    }
    printf("\n");

    // Display results
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", processes[i].process_id, processes[i].arrival_time, 
               processes[i].burst_time, processes[i].completion_time, 
               processes[i].turnaround_time, processes[i].waiting_time);
    }

    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n);
    printf("\nAverage Waiting Time: %.2f\n", (float)total_wt / n);
}

int main() {
    int n = 4, time_quantum = 1, cst = 1;

    Process processes[] = {
        {1, 0, 6, 6, 0, 0, 0}, // P1
        {2, 2, 8, 8, 0, 0, 0}, // P2
        {3, 4, 7, 7, 0, 0, 0}, // P3
        {4, 6, 3, 3, 0, 0, 0}  // P4
    };

    round_robin(processes, n, time_quantum, cst);

    return 0;
}
