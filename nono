Bisection:->

clc

clear
f=@(x) x^2-2;
h=0.001;
count=0;
for i=-5:5
    if f(i)*f(i+1)<0
        a=i;
        b=i+1;
        count=count+1;
    
while abs(a-b)>h
    m=(a+b)/2;
    if f(m)==0
        break;
    end
    if f(m)*f(b)>0
            b=m;
    else
        a=m;
    
    
    end

end
fprintf('Root %d is approximately: %.4f\n', count, m);
    end

end



Fixed Point Iter:->
clc;
clear;

% Define the function g(x)
g = @(x) sqrt(3); % Example: solving x^2 - 3 = 0 rewritten as x = sqrt(3)

% Parameters
x0 = 1.5; % Initial guess
tolerance = 1e-6; % Convergence tolerance
max_iter = 100; % Maximum number of iterations

% Fixed-point iteration
fprintf('Fixed-Point Iteration Method:\n');
fprintf('Iteration\t x_n\t\t Error\n');
for iter = 1:max_iter
    x1 = g(x0); % Compute next approximation
    error = abs(x1 - x0); % Calculate error
    
    % Display iteration results
    fprintf('%d\t\t %.6f\t %.6f\n', iter, x1, error);
    
    if error < tolerance % Check for convergence
        fprintf('Converged to solution: %.6f after %d iterations.\n', x1, iter);
        break;
    end
    
    x0 = x1; % Update the previous value for the next iteration
end

% If maximum iterations are reached
if iter == max_iter
    fprintf('Failed to converge after %d iterations.\n',Â max_iter);
end






Newton Raphons :->

clc 
clear all 
syms x;
f = x*x-x-12 ;  
g= diff(f,x);
x0 = input('Enter initial approximation of root :'); 
tol = input('Enter tolerance : '); 
x1 = x0 - (subs(f, x, x0) / subs(g, x, x0));
 
while abs(x1-x0)>tol 
     
    if subs(g, x, x0)==0 
        fprintf('Slope is zero at xn = %f ,so Newton Raphson Method fails' ,x0); 
        return 
    else 
        x0 = x1; 
    end 
    x1 = x0 - (subs(f, x, x0) / subs(g, x, x0));
end 
fprintf('Approx Root is : %0.4f',x1); 


L interpolation

clc;
clear;

% Define data points
x = [1 2 3]; % Known x values
y = [1 4 9]; % Known y values
p = 2.5; % Point to interpolate

n = length(x); % Number of data points
L = ones(1, n); % Initialize Lagrange basis polynomials

% Compute Lagrange basis polynomials
for i = 1:n
    for j = 1:n
        if i ~= j
            L(i) = L(i) * (p - x(j)) / (x(i) - x(j));
        end
    end
end

% Compute interpolated value
P=0;
for i=1:n
    P=P+L(i)*y(i);
end

fprintf('The interpolated value at x = %.2f is P(%.2f) = %.4f\n', p, p, P);




Newton Divided Difference 

clc 
clear all 
x=[-1;0;1;4]; 
f=[6;5;4;61]; 
n=4; 
b=2; 
for i=1:n 
d(1,i)=f(i); 
end 
for i=2:n 
for j=1:n-i+1 
d(i,j)=(d(i-1,j+1)-d(i-1,j))/(x(j+i-1)-x(j)); 
end 
end 
ans = d(1,1); 
p=1; 
for i=2:n 
p=p*(b-x(i-1)); 
ans = ans + (p*d(i,1)); 
end 
ans



trapezoidal 

clc
clear 
f = @(x) x^2;

% Define limits and number of subintervals
a = 0;
b = 2;
n = 4;
 h = (b - a) / n;  % Step size
    S = f(a) + f(b);  % Initialize sum with boundary points

    for i = 1:n-1
        x = a + i * h; % Interior points
        S = S + 2 * f(x);
    end

    result = (h / 2) * S;  % Final result
    disp(result);



Simpson
clc
clear

% Define the function to integrate
f = @(x) x.^2;

% Define limits and number of subintervals
a = 0;
b = 2;
n = 4; % Must be even

% Check if the number of subintervals is even
if mod(n, 2) ~= 0
    error('Number of subintervals (n) must be even.');
end

% Step size
h = (b - a) / n;

% Points on the interval
x = a:h:b;

% Function values at those points
y = f(x);

% Simpson's 1/3 Rule formula
% S = f(a) + f(b) + 4 * sum(f(odd indices)) + 2 * sum(f(even indices))
S = y(1) + y(end) + 4 * sum(y(2:2:end-1)) + 2 * sum(y(3:2:end-2));

% Multiply by h/3 to get the result
result = (h / 3) * S;

% Display the result
disp(['The integral value is: ', num2str(result)]);




Gauss Ellimination

clc
clear
a=[1 2 3;4 5 6; 7 8 7];
b=[3,7,9];
n=length(b);
l=ones(n,n);
for i=1:n-1
    for j=i+1:n
        l(j,i)=a(j,i)/a(i,i);
        a(j,:)=a(j,:)-l(j,i)*a(i,:);
        b(j)=b(j)-l(j,i)*b(i);
    end
end
x(n)=b(n)/a(n,n);
for i=n-1:-1:1
     sum2 = 0 ; 
    for j=i+1:n 
        sum2 = sum2+a(i,j)*x(j); 
    end 
    x(i) = (b(i) - sum2)/a(i,i); 
end 
x 



Gauss Seddle 


 
clc  
clear all  
a=[5,0,1,-2 ; -1,4,-1,1 ; 2,3,-6,0 ; 1,2,4,10]; 
b=[11 ; -9 ; -13 ; -13]; 
tol = 0.00001; 
n = 4 ; 
x=[1;1;1;1]; 
while 1 
    x_prev = x ; 
    for i=1:n 
        sum = 0; 
        for j=1:n 
            if i~=j 
            sum = sum + (a(i,j)*x(j)); 
            end 
        end 
        x(i) = (b(i)-sum)/a(i,i); 
    end 
 
    err = max(abs(x_prev-x)); 
    if(err<tol) 
        break; 
    end 
end 
x 
 

power 

clc ; clear all;
n = input("Enter the order of this matrix");
A = [ 2 1 3; 0 -5 2 ; 0 0 -1];
x0 = [1;1;1];
tol =0.0001;

y=A*x0;

[mv,indx] = max(abs(y));
ev = y(indx) ; err = 1; x0 = (1/ev)*y;

while err > tol 
    y = A*x0;
    [mv,indx] = max(abs(y));
    ev_new = y(indx);
    x0 = (1/ev_new)*y;
    err = abs(ev_new-ev);
    ev = ev_new;
end
ev_new
y







